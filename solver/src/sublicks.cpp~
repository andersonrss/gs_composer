
#include <ilcplex/ilocplex.h>
#include <cstdio>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdlib.h>

#include "util.h"
#include "sublicks.h"

using namespace std;


int sublicks(int max_bends, int max_slides, int max_quialteras, int max_pausas, int max_notas, double taxa_bends, double taxa_slides, double taxa_quialteras, double taxa_normal, double taxa_sublicks, int nFiles)
{
	
/*  *************************************************
	*               Pré-Processamento               *
	*************************************************  */
	
	srand(time(NULL));
	
	//vetores e seus respectivos tamanhos
	int *qBends, n_bends;
	int *qSlides, n_slides;
	int *qQuialteras, n_quialteras;
	int *qNormal, n_normal;
	int *qPausas, n_pausas;
	int *qNotas;
	double *tSublicks;
	int *subconjunto;
	
	//preenchendo vetores com informações de pausas, tempo e quantidade de notas em cada sublick
	qPausas = indices_pausas(&n_pausas);
	tSublicks = tempo_sublicks(nFiles);
	qNotas = qtde_notas(nFiles);
	
	
	
	/* ------------------------------------------------------------ */
	/* ---------- abordagem "pegando o conjunto inteiro" ---------- */
	/* ------------------------------------------------------------ */
	
	//qBends = indices_bend(&n_bends);
	//qSlides = indices_slides(&n_slides);
	//qQuialteras = indices_quialteras(&n_quialteras);
	//qNormal = indices_normal(&n_normal);
	
	
	
	/* ----------------------------------------------------------------------------------- */
	/* ---------- abordagem "pegando k% DE CADA tipo de sublick aleatoriamente" ---------- */
	/* ----------------------------------------------------------------------------------- */
	
	int qtdeVetores = 5;
	int qtdeTamanhos = qtdeVetores;
	int *vetorVariaveis, tVetorVariaveis;
	
	qBends = indices_random(&n_bends, taxa_bends, (char *) "licks_comuns/exato/files/qBends");
	qSlides = indices_random(&n_slides, taxa_slides, (char *) "licks_comuns/exato/files/qSlides");
	qQuialteras = indices_random(&n_quialteras, taxa_quialteras, (char *) "licks_comuns/exato/files/qQuialteras");
	qNormal = indices_random(&n_normal, taxa_normal, (char *) "licks_comuns/exato/files/qNormal");
	
	int *mergeTamanhos = new int [qtdeTamanhos];
	
	mergeTamanhos[0] = n_bends;
	mergeTamanhos[1] = n_slides;
	mergeTamanhos[2] = n_quialteras;
	mergeTamanhos[3] = n_normal;
	mergeTamanhos[4] = n_pausas;
	
	int **mergeVetores = new int *[qtdeVetores];
	
	mergeVetores[0] = qBends;
	mergeVetores[1] = qSlides;
	mergeVetores[2] = qQuialteras;
	mergeVetores[3] = qNormal;
	mergeVetores[4] = qPausas;
	
	vetorVariaveis = merge(mergeTamanhos, mergeVetores, qtdeTamanhos, qtdeVetores, &tVetorVariaveis);
	
	
	
	/* ------------------------------------------------------------------------------ */
	/* ---------- abordagem "pegando k% do conjunto INTEIRO aleatoriamente ---------- */
	/* ------------------------------------------------------------------------------ */
	
	//int tamanho_subconjunto;	
	//subconjunto = indices_subconjunto_rand(nFiles, taxa_sublicks, &tamanho_subconjunto);
	
	
	
	//declaração da matriz de penalidades
	double **matrizPen = new double *[nFiles];
	
	for (int i = 0 ; i < nFiles ; i++)
		matrizPen[i] = new double[nFiles];
		
	matrizPen = matriz_penalidades(nFiles);

/*  *************************************************
	*               Modelo Matemático               *
	*************************************************  */
	
	typedef IloArray <IloNumVarArray> NumVarMatrix;
	
	int i, j, k;
	IloEnv env;
	IloModel modelo(env);
	char varName[100];
	char cName[100];
	
	//variáveis 'x'
	NumVarMatrix x(env, nFiles);
	for (i = 0 ; i < nFiles ; i++){
		x[i] = IloNumVarArray(env, nFiles);
		for (j = 0 ; j < nFiles ; j++){
			x[i][j] = IloNumVar(env, 0.0, 1.0, ILOINT);
		} 
	}
	
	//adicionando 'x' ao modelo
	for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			for (j = 0 ; j < nFiles ; j++){
				if (i == j)
					continue;
				if (verifica_variavel(vetorVariaveis, tVetorVariaveis, j) == 1){
					sprintf(varName, "x_%d_%d", i, j);
					x[i][j].setName(varName);
					modelo.add(x[i][j]);
				}
			}
		}
	}

	//variáveis 'y'
	IloBoolVarArray y(env, nFiles);
	
	//adicionando 'y' ao modelo
	for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			sprintf(varName, "y_%d", i);
			y[i].setName(varName);
			modelo.add(y[i]);
		}
	}

	//função objetivo
	IloExpr fo(env);
	for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			for (j = 0 ; j < nFiles ; j++){
				if (i == j)
					continue;
				if (verifica_variavel(vetorVariaveis, tVetorVariaveis, j) == 1){
					fo += matrizPen[i][j] * x[i][j];
				}
			}
		}
	}
	modelo.add(IloMinimize(env, fo));

	//restrição 1: entra apenas um arco
	for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			IloExpr inFlow(env);
			for (j = 0 ; j < nFiles ; j++){
				if (i == j)
					continue;
				if (verifica_variavel(vetorVariaveis, tVetorVariaveis, j) == 1){	
					inFlow += x[i][j];
				}
			}
			IloConstraint const_in = (inFlow == y[i]);
			sprintf(cName, "in_%d", i);
			const_in.setName(cName);
			modelo.add(const_in);
		}
	}
	
	//restrição 2: sai apenas um arco
	for (j = 0 ; j < nFiles ; j++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, j) == 1){	
			IloExpr outFlow(env);
			for (i = 0 ; i < nFiles ; i++){
				if (j == i)
					continue;
				if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
					outFlow += x[i][j];
				}
			}
			IloConstraint const_out = (outFlow == y[j]);
			sprintf(cName, "out_%d", j);
			const_out.setName(cName);
			modelo.add(const_out);
		}
	}	
	
	//restrição 3: o tamanho do sublick deve ser exatamente igual a 64 (tamanho de um compasso (lick) completo)
	IloExpr times(env);
	for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			times += tSublicks[i] * y[i];
		}
	}
	IloConstraint const_time = (times == 64);
	const_time.setName("c_time");
	modelo.add(const_time);
	
	//restrição 4: o número de bends no sublick deve ser exatamente igual à especificação do usuário
	IloExpr bends(env);
	for (i = 0 ; i < n_bends ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, qBends[i]) == 1){
			bends += y[qBends[i]];
		}
	}
	IloConstraint const_bend = (bends == max_bends);
	const_bend.setName("c_bend");
	modelo.add(const_bend);
	
	//restrição 5: o número de slides no sublick deve ser exatamente igual à especificação do usuário
	IloExpr slides(env);
	for (i = 0 ; i < n_slides ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, qSlides[i]) == 1){
			slides += y[qSlides[i]];
		}
	}
	IloConstraint const_slide = (slides == max_slides);
	const_slide.setName("c_slide");
	modelo.add(const_slide);
	
	//restrição 6: o número de quiálteras no sublick deve ser exatamente igual à especificação do usuário
	IloExpr quialteras(env);
	for (i = 0 ; i < n_quialteras ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, qQuialteras[i]) == 1){
			quialteras += y[qQuialteras[i]];
		}
	}
	IloConstraint const_qui = (quialteras == max_quialteras);
	const_qui.setName("c_quialtera");
	modelo.add(const_qui);
	
	//restrição 6: o número de pausas no sublick deve ser exatamente igual à especificação do usuário
	IloExpr pausas(env);
	for (i = 0 ; i < n_pausas ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, qPausas[i]) == 1){
			pausas += y[qPausas[i]];
		}
	}
	IloConstraint const_pausa = (pausas == max_pausas);
	const_pausa.setName("c_pausa");
	modelo.add(const_pausa);

	//restrição 7: o número de notas no sublick deve ser exatamente igual à especificação do usuário
	IloExpr notas(env);
	for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			notas += qNotas[i] * y[i];
		}
	}
	IloConstraint const_nota = (notas <= max_notas);
	const_nota.setName("c_nota");
	modelo.add(const_nota);
	
	//restrições 8: um arco saindo de um sublick não pode voltar para ele mesmo (eu acho)
	for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			for (j = 0 ; j < nFiles ; j++){
				if (verifica_variavel(vetorVariaveis, tVetorVariaveis, j) == 1){	
					if (i < j){
						IloConstraint const_sub = (x[i][j] + x[j][i] <= 1);
						sprintf(cName, "self_%d_%d", i, j);
						const_sub.setName(cName);
						modelo.add(const_sub);
					}
				}
			}
		}
	}
	
	// *** parte do código que auxilia na eliminação de subtours (código de marcos) ***
	IloArray <IloBoolVarArray> z(env, nFiles);
    for (i = 0 ; i < nFiles ; i++){
    	IloBoolVarArray array(env, nFiles);
    	z[i] = array;
    }
    
	for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			for (j = 0 ; j < nFiles ; j++){
		    	if (verifica_variavel(vetorVariaveis, tVetorVariaveis, j) == 1){
					if (i < j){
				    	sprintf(varName, "Z(%d,%d)", i, j);
				    	z[i][j].setName(varName);
				    	modelo.add(z[i][j]);
				    }
				}
		    }
		}
    }
    
	//restrição
    for (i = 0 ; i < nFiles ; i++){
		if (verifica_variavel(vetorVariaveis, tVetorVariaveis, i) == 1){
			for (j = 0 ; j < nFiles ; j++){
		    	if (verifica_variavel(vetorVariaveis, tVetorVariaveis, j) == 1){
					if (i < j){
				    	IloConstraint constr = (x[i][j] + x[j][i] - z[i][j] == 0);
				    	sprintf(cName,"c7_%d_%d", i, j);
				    	constr.setName(cName);
				    	modelo.add(constr);
				  	}
				}
			}
		}
    }
	
	IloCplex cplex(env);
    //cplex.setOut(env.getNullStream());
    cplex.extract(modelo);
    cplex.exportModel("licks_comuns/exato/sublicks.lp");

    return 0;
	
}
