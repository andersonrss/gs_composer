
#include <ilcplex/ilocplex.h>
#include <cstdio>
#include <iostream>
#include <vector>
#include <string.h>
#include <stdlib.h>

#include "util.h"
#include "sublicks.h"

using namespace std;


int sublicks(int nFiles)
{
	
/*  *************************************************
	*               Pré-Processamento               *
	*************************************************  */
	
	int *qRepeticao, n_repeticao;

	qRepeticao = indices_repeticao(&n_repeticao);
	
	//declaração da matriz de penalidades
	double **matrizPen = new double *[nFiles];
	
	for (int i = 0 ; i < nFiles ; i++)
		matrizPen[i] = new double[nFiles];
		
	matrizPen = matriz_penalidades(nFiles);

/*  *************************************************
	*               Modelo Matemático               *
	*************************************************  */
	
	typedef IloArray <IloNumVarArray> NumVarMatrix;
	
	int i, j, k;
	IloEnv env;
	IloModel modelo(env);
	char varName[100];
	char cName[100];
	
	//variáveis 'x'
	NumVarMatrix x(env, nFiles);
	for (i = 0 ; i < nFiles ; i++){
		x[i] = IloNumVarArray(env, nFiles);
		for (j = 0 ; j < nFiles ; j++){
			x[i][j] = IloNumVar(env, 0.0, 1.0, ILOINT);
		} 
	}
	
	//adicionando 'x' ao modelo
	for (i = 0 ; i < nFiles ; i++){
		for (j = 0 ; j < nFiles ; j++){
			if (i == j)
				continue;
			sprintf(varName, "x_%d_%d", i, j);
			x[i][j].setName(varName);
			modelo.add(x[i][j]);
		}
	}

	//variáveis 'y'
	IloBoolVarArray y(env, nFiles);
	
	//adicionando 'y' ao modelo
	for (i = 0 ; i < nFiles ; i++){
		sprintf(varName, "y_%d", i);
		y[i].setName(varName);
		modelo.add(y[i]);
	}

	//função objetivo
	IloExpr fo(env);
	for (i = 0 ; i < nFiles ; i++){
		for (j = 0 ; j < nFiles ; j++){
			if (i == j)
				continue;
			fo += matrizPen[i][j] * x[i][j];
		}
	}
	modelo.add(IloMinimize(env, fo));

	//restrição 1: entra apenas um arco
	for (i = 0 ; i < nFiles ; i++){
		IloExpr inFlow(env);
		for (j = 0 ; j < nFiles ; j++){
			if (i == j)
				continue;
			inFlow += x[i][j];
		}
		IloConstraint const_in = (inFlow == y[i]);
		sprintf(cName, "in_%d", i);
		const_in.setName(cName);
		modelo.add(const_in);
	}
	
	//restrição 2: sai apenas um arco
	for (j = 0 ; j < nFiles ; j++){
		IloExpr outFlow(env);
		for (i = 0 ; i < nFiles ; i++){
			if (j == i)
				continue;
				outFlow += x[i][j];
		}
		IloConstraint const_out = (outFlow == y[j]);
		sprintf(cName, "out_%d", j);
		const_out.setName(cName);
		modelo.add(const_out);
	}	
	
	//restrição 3: o tamanho do solo deve ter 12 compassos (10 + 2turnarrounds)
	IloExpr times(env);
	for (i = 0 ; i < nFiles ; i++){
		times += y[i];
	}
	IloConstraint const_time = (times == 10);
	const_time.setName("c_time");
	modelo.add(const_time);
	
	//restrição 4: o número de licks de repeticao deve ser exatamente igual à especificação do usuário
	IloExpr repeticao(env);
	for (i = 0 ; i < n_repeticao ; i++){
		repeticao += y[qRepeticao[i]];
	}
	IloConstraint const_repeticao = (repeticao == 2);
	const_repeticao.setName("c_repeticao");
	modelo.add(const_repeticao);
	
	//restrições 8: um arco saindo de um sublick não pode voltar para ele mesmo (eu acho)
	for (i = 0 ; i < nFiles ; i++){
		for (j = 0 ; j < nFiles ; j++){
			if (i < j){
				IloConstraint const_sub = (x[i][j] + x[j][i] <= 1);
				sprintf(cName, "self_%d_%d", i, j);
				const_sub.setName(cName);
				modelo.add(const_sub);
			}
		}
	}
	
	// *** parte do código que auxilia na eliminação de subtours (código de marcos) ***
	IloArray <IloBoolVarArray> z(env, nFiles);
    for (i = 0 ; i < nFiles ; i++){
    	IloBoolVarArray array(env, nFiles);
    	z[i] = array;
    }
    
    for (i = 0 ; i < nFiles ; i++){
	    for (j = 0 ; j < nFiles ; j++){
		    if (i < j){
		        sprintf(varName, "Z(%d,%d)", i, j);
		        z[i][j].setName(varName);
		        modelo.add(z[i][j]);
		    }
	    }
    }
    
	//restrição
    for (i = 0 ; i < nFiles ; i++){
		for (j = 0 ; j < nFiles ; j++){
			if (i < j){
		    	IloConstraint constr = (x[i][j] + x[j][i] - z[i][j] == 0);
		    	sprintf(cName,"c7_%d_%d", i, j);
		    	constr.setName(cName);
		    	modelo.add(constr);
		  	}
		}
    }
	
	IloCplex cplex(env);
    //cplex.setOut(env.getNullStream());
    cplex.extract(modelo);
    cplex.exportModel("licks.lp");

    return 0;
	
}
