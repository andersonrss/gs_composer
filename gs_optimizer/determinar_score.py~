
# -*- coding: utf-8 -*-
import util
from copy import deepcopy


'''
Calcula um score de transição baseado na distãncia eucludiana entre as duas notas

Se a distância euclidiana entre as notas for menor que dist:
	-> Bonificação de k pontos na transição
	Caso contrário:
		-> Penalização de k pontos na transição
		
A distância entre as notas é um critério de avaliação para determinar um score de transição, pois é necessário para evitar que, no âmbito de tocabilidade, licks indesejáveis apareçam. Caso uma pausa e uma nota sejam comparadas, uma bonificação é efetuada automaticamente, pois uma pausa é uma brecha para tocar qualquer outra nota no braço da guitarra.
'''

def notas_proximas(nota_a, nota_b):
	
	if nota_a.find('rest') is not None or nota_b.find('rest') is not None:
		return 0
	
	dist = util.distancia_notas(nota_a, nota_b)
	
	if dist > 2:
		score = 200
	else:
		score = -100
	
	return score
	
	
'''
Se as duas notas forem iguais:
	-> Bonificação de k pontos na transição
'''

def notas_iguais(nota_a, nota_b):
	
	score = 0
	
	if ( nota_a.find('rest') is None ) and ( nota_b.find('rest') is None ):
		if ( nota_a.find('notations').find('technical').find('string').text == nota_b.find('notations').find('technical').find('string').text ) and ( nota_a.find('notations').find('technical').find('fret').text == nota_b.find('notations').find('technical').find('fret').text ):
			score = -50
	
	return score


'''
Se a segunda nota estiver a 1 posição anterior ou posterior da primeira na escala pentatõnica:
	-> Bonificação de k pontos na transição
'''

def notas_sequenciais(nota_a, nota_b, root):

	score = 0
	
	measure = root.find('part').find('measure')
	escala = deepcopy(list(measure.iter('note')))
	
	if ( nota_a.find('rest') is None ) and ( nota_b.find('rest') is None ):
		for i in range(len(escala)):
			if i == 0:
				if ( nota_a.find('pitch').find('step').text == escala[i].find('pitch').find('step').text and ( ( nota_a.find('pitch').find('alter') is not None and escala[i].find('pitch').find('alter') is not None ) or ( nota_a.find('pitch').find('alter') is None and escala[i].find('pitch').find('alter') is None ) ) ):
					if ( nota_b.find('pitch').find('step').text == escala[i+1].find('pitch').find('step').text ) and ( ( nota_b.find('pitch').find('alter') is not None and escala[i+1].find('pitch').find('alter') is not None ) or ( nota_b.find('pitch').find('alter') is None and escala[i+1].find('pitch').find('alter') is None ) ):
						if util.distancia_notas(nota_a, nota_b) <= 2:
							score = -150
				continue
					
			if i == (len(escala)-1):
				if ( nota_a.find('pitch').find('step').text == escala[i].find('pitch').find('step').text and ( ( nota_a.find('pitch').find('alter') is not None and escala[i].find('pitch').find('alter') is not None ) or ( nota_a.find('pitch').find('alter') is None and escala[i].find('pitch').find('alter') is None ) ) ):
					if ( nota_b.find('pitch').find('step').text == escala[i-1].find('pitch').find('step').text ) and ( ( nota_b.find('pitch').find('alter') is not None and escala[i-1].find('pitch').find('alter') is not None ) or ( nota_b.find('pitch').find('alter') is None and escala[i-1].find('pitch').find('alter') is None ) ):
						if util.distancia_notas(nota_a, nota_b) <= 2:
							score = -150
				continue
	
			if ( nota_a.find('pitch').find('step').text == escala[i].find('pitch').find('step').text and ( ( nota_a.find('pitch').find('alter') is not None and escala[i].find('pitch').find('alter') is not None ) or ( nota_a.find('pitch').find('alter') is None and escala[i].find('pitch').find('alter') is None ) ) ):
				if ( ( nota_b.find('pitch').find('step').text == escala[i-1].find('pitch').find('step').text ) and ( ( nota_b.find('pitch').find('alter') is not None and escala[i-1].find('pitch').find('alter') is not None ) or ( nota_b.find('pitch').find('alter') is None and escala[i-1].find('pitch').find('alter') is None ) ) ) or ( ( nota_b.find('pitch').find('step').text == escala[i+1].find('pitch').find('step').text ) and ( ( nota_b.find('pitch').find('alter') is not None and escala[i+1].find('pitch').find('alter') is not None ) or ( nota_b.find('pitch').find('alter') is None and escala[i+1].find('pitch').find('alter') is None ) ) ):
					if util.distancia_notas(nota_a, nota_b) <= 2:
						score = -150
				continue

	return score


'''
Se a diferença de tempo envolvendo pausas entre as duas notas for menor que 2 tempos:
	-> Bonificação de k pontos na transição
	Caso contrário:
		-> Penalização de k pontos na transição
'''

def pausas(nota_a, nota_b):
	
	acc = 0
	score = 0
	
	if ( nota_a.find('rest') is not None ) or ( nota_b.find('rest') is not None ):
		if nota_a.find('rest') is not None:
			acc += util.get_duracao(nota_a)
		
		if nota_b.find('rest') is not None:
			acc += util.get_duracao(nota_b)
	
		if acc <= 16:
			score = -50
		
		if acc > 32:
			score = 75
				
	return score


'''Se a transição ocorrer entre um lick de repetição e um lick comum:
	-> Bonificação de k pontos na transição'''
	
def repeticao(lick_a, lick_b):

	score = 0

	if ( util.verifica_repeticao(lick_a) and not util.verifica_repeticao(lick_b) ) or ( not util.verifica_repeticao(lick_a) and util.verifica_repeticao(lick_b) ):
		score += -50
	
	return score

		
